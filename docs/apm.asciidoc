[id="{p}-apm-server"]
== APM Server

This section describes how to deploy, configure and access an APM server with ECK.

NOTE: The current Docker image of the APM server needs to be run as `root` or with the user id 1000. This prevents to run the APM server on some environments like Openshift or on any Kubernetes cluster that would set a different user in the security context.

=== Use an Elasticsearch cluster managed by ECK

When both the APM server and Elasticsearch are managed by ECK it allows a smooth and secured integration between the two. The output configuration of the APM server is setup automatically to establish a trust relationship with Elasticsearch.

. If you want to deploy the APM server and connect it to the cluster `quickstart` created in the quickstart then apply the following specification:
+
[source,yaml]
----
cat <<EOF | kubectl apply -f -
apiVersion: apm.k8s.elastic.co/v1alpha1
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: "7.2.0"
  nodeCount: 1
  elasticsearchRef:
    name: quickstart
EOF
----
+
NOTE: Deploying the APM server and Elasticsearch in two different namespaces is not supported for the moment.
+
. Monitor APM server deployment
+
You can retrieve details about the APM server instance:
+
[source,sh]
----
kubectl get apmservers
----
+
[source,sh]
----
NAME                    HEALTH   NODES   VERSION   AGE
apm-server-quickstart   green    1       7.2.0     8m
----
And you can list all the Pods belonging to a given deployment:
+
[source,sh]
----
kubectl get pods --selector='apm.k8s.elastic.co/name=apm-server-quickstart'
----
+
[source,sh]
----
NAME                                                READY   STATUS    RESTARTS   AGE
apm-server-quickstart-apm-server-69b447ddc5-fflc6   1/1     Running   0          2m50s
----


=== Advanced configuration

==== Customize the APM server configuration

You can customize the configuration of the APM server using the `config`:

[source,yaml]
----
apiVersion: apm.k8s.elastic.co/v1alpha1
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: "7.2.0"
  nodeCount: 1
  config:
    output:
      elasticsearch:
        headers:
          X-My-Header: Just an example of a custom settings
  elasticsearchRef:
    name: quickstart
----

Your configuration always overrides the ones that are generated by the operator.

==== APM Secrets keystore for secure settings



==== Reference an already existing Elasticsearch cluster

Let see how to manually configure a secured connection to an already existing Elasticsearch cluster:

. Create a secret with the Elasticsearch CA
+
First we need to store the certificate authority of the Elasticsearch cluster in a secret:
+
[source,yaml]
----
kubectl create secret generic es-ca --from-file=tls.crt=elasticsearch-ca.crt -n apm-namespace
----
In the above command the file `elasticsearch-ca.crt` must contain the CA of the Elasticsearch cluster you want to use. You can then mount this secret using the pod template and reference the file in the `config` of the APM server.
+
Here is a complete example with a password stored in the Keystore as it is described in the previous section:
[source,yaml]
----
apiVersion: apm.k8s.elastic.co/v1alpha1
kind: ApmServer
metadata:
  name: apm-server-quickstart
  namespace: default
spec:
  version: "7.2.0"
  nodeCount: 1
  config:
    output:
      elasticsearch:
        hosts: ["quickstart-es-http.default.svc:9200"]
        username: elastic
        password: "${ES_PASSWORD}"
        protocol: "https"
        ssl.certificate_authorities: ["/usr/share/apm-server/config/elasticsearch-ca/tls.crt"]
  podTemplate:
    spec:
      containers:
      - name: apm-server
        volumeMounts:
        - mountPath: /usr/share/apm-server/config/elasticsearch-ca
          name: elasticsearch-ca
          readOnly: true
      volumes:
      - name: elasticsearch-ca
        secret:
          defaultMode: 420
          optional: false
          secretName: es-ca # This is the secret that holds the Elasticsearch CA cert
----
