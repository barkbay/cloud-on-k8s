ifdef::env-github[]
****
link:https://www.elastic.co/guide/en/cloud-on-k8s/master/restrict-cross-namespace-associations.html[View this document on the Elastic website]
****
endif::[]
[id="{p}-restrict-cross-namespace-associations"]
=== Restrict cross namespace resource associations

By default, associations can be created between any resources as long as they are deployed in namespaces managed by the same ECK instance.

This is true, for example, when using the `elasticsearchRef` field to automatically configure and establish a trust relationship between Kibana and Elasticsearch. If a user can create a Kibana instance in a namespace managed by ECK, then this Kibana instance can be associated with any Elasticsearch cluster deployed in another namespace managed by the same ECK instance, even if the user only has permissions to edit Kibana and not the Elasticsearch resource.

This section describes how you can restrict the associations that can be created between resources managed by ECK.

[float]
==== Enabling cross namespace association restriction

This feature is disabled by default. To enable it, start the operator with the `--enforce-rbac-on-refs` flag.

NOTE: This feature only provides an access control for resources deployed across two different namespaces. Associations can still be freely created between resources deployed in the same namespace.

Once enabled, associations can be created as long as the `ServiceAccount` specified in the associated resources can execute an HTTP `get` request against the referenced Elasticsearch object.

IMPORTANT: ECK removes any association that is not allowed. If you have existing associations, do not enable this feature without creating the required `Roles` and `RoleBindings` as described in the following sections.

[float]
==== Allowing associations to be created

First create a `ServiceAccount`:

[source,sh]
----
> kubectl create serviceaccount associated-resource-sa
----

Then set the `serviceAccountName` field in the associated resource to specify which `ServiceAccount` is used to create the association:

[source,yaml,subs="attributes"]
----
apiVersion: <kind>.k8s.elastic.co/{eck_crd_version}
kind: <Kind>
metadata:
  name: associated-resource
  namespace: associated-resource-ns
spec:
 ...
  elasticsearchRef:
    name: "elasticsearch-sample"
    namespace: "elasticsearch-ns"
  # Service account used by this resource to get access to an Elasticsearch cluster
  serviceAccountName: associated-resource-sa
----

In the above example, `associated-resource` can be of any `Kind` that requires an association to be created (e.g. `Kibana` or the `APMServer`).
You can find https://github.com/elastic/cloud-on-k8s/blob/master/config/recipes/associations-rbac/apm_es_kibana_rbac.yaml[a complete example in the ECK GitHub repository].

NOTE: If the `serviceAccountName` is not set then ECK uses the `ServiceAccount` called `default`

Create a `ClusterRole` to allow an HTTP `get` request to be run against Elasticsearch objects:

[source,yaml]
----
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elasticsearch-association
rules:
  - apiGroups:
      - elasticsearch.k8s.elastic.co
    resources:
      - elasticsearches
    verbs:
      - get
----

Then, to allow the `ServiceAccount` of the associated resource to use this role create the following `RoleBinding`:

[source,yaml]
----
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: allow-associated-resource-from-remote-namespace
  namespace: elasticsearch-ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elasticsearch-association
subjects:
  - kind: ServiceAccount
    name: associated-resource-sa
    namespace: associated-resource-ns
----

The associated resource `associated-resource` is now allowed to create an association with any Elasticsearch cluster in the namespace `elasticsearch-ns`.