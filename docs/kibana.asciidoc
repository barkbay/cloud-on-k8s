[id="{p}-kibana"]
== Running Kibana on ECK

If you already have read the documentation about how to run Elasticsearch on ECK then most of the concepts and the ideas
described here will sound familiar to you.
This is because the resource definitions in ECK share the same philosophy when it's time to:

* Customize the Pod configuration
* Customize the product configuration
* Manage the HTTP settings
* Use secure settings

The quickstart is a good starting point to quickly setup a Kibana instance with ECK.
This section goes into more details about how to configure Kibana with ECK.

* <<{p}-pod-configuration,Pod Configuration>>
* <<{p}-kibana-configuration,Kibana Configuration>>
* <<{p}-http-configuration,HTTP Configuration>>
** <<{p}-k8s-svc,HTTP settings and TLS SANs>>
** <<{p}-k8s-svc,Disable TLS>>

[float]
[id="{p}-pod-configuration"]
==== Pod Configuration
The Kibana resource definition lets you define your own Pod template, add your own settings and merge them
with our defaults.
You can find more information in link:k8s-pod-template.html[the Pod template dedicated section].

As an example here is a Kibana deployment with a custom node affinity and some custom resources for the Kibana container:

[source,yaml]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: 7.4.0
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  podTemplate:
    spec:
      containers:
      - name: kibana <1>
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2Gi
            cpu: 2
      nodeSelector:
        type: frontend
----

<1> Note that the name of the container in the Pod created by ECK in a Kibana Pod is `kibana`.

For more information about the resources and the default behavior please refer to
link:k8s-managing-compute-resources.html#k8s-compute-resources-kibana-and-apm[Set compute resources for Kibana and the APM Server].

[float]
[id="{p}-kibana-configuration"]
==== Kibana Configuration
You can add your own Kibana settings in the `spec.config` section.

As an example here is how to set `elasticsearch.requestHeadersWhitelist` in the Kibana configuration file.

[source,yaml]
----
spec:
  config:
     elasticsearch.requestHeadersWhitelist:
     - authorization
----

[float]
[id="{p}-kibana-scaling"]
=== Scaling a Kibana deployment
A known limitation in the current implementation is that you have to set `xpack.security.encryptionKey` in the
Kibana configuration if you want to scale to more than one Pod.

This can be done either directly in the `spec.config` section:

[source,yaml]
----
spec:
  config:
     xpack.security.encryptionKey: my-secret-key
----

Or by using a secure setting (recommended) as described in the next section.

[float]
[id="{p}-secure-settings"]
=== Secure Settings

You can use Kubernetes secrets to hold your secure settings in the (link:k8s-es-secure-settings.html)[same way it is done with Elasticsearch].

As an example let say that you want to scale you Kibana deployment by creating several instances.
In order to do that that you have to set `xpack.security.encryptionKey` in the
Kibana configuration.

. First create a secret with the secret settings:
+
[source,yaml]
----
kubectl create secret generic kibana-secret-settings \
 --from-literal=xpack.security.encryptionKey=94d2263b1ead716ae228277049f19975aff864fb4fcfe419c95123c1e90938cd
----

. Then add a reference to this secret in the `secureSettings` section:
+
[source,yaml]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: 7.4.0
  count: 3
  elasticsearchRef:
    name: "elasticsearch-sample"
  secureSettings:
  - secretName: kibana-secret-settings
----

[float]
[id="{p}-http-configuration"]
=== HTTP Configuration

=== Publish the service and customize the self signed certificate

You may want to expose the Kibana onto an external IP address. In this case you may also want to include a custom
DNS name or IP in the self-generated certificate.

[source,yaml]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: 7.4.0
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    service:
      spec:
        type: LoadBalancer # default is ClusterIP
    tls:
      selfSignedCertificate:
        subjectAltNames:
        - ip: 1.2.3.4
        - dns: kibana.example.com
----

You can also use these two features separately, either expose the service or add some subjects to the
self-signed certificate.

=== Provide your own certificate

* Customize the link:k8s-http-settings-tls-sans.html[Kubernetes service and the subjects in the generated certificate].

[float]
[id="{p}-http-disable-tls"]
==== Disable TLS

You can disable the generation of the self-signed certificate and hence disable TLS.

[source,yaml]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: 7.4.0
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    tls:
      selfSignedCertificate:
        disabled: true
----
