[id="{p}-kibana"]
== Running Kibana on ECK

The link:k8s-quickstart.html#k8s-deploy-kibana[quickstart] is a good starting point to quickly setup a Kibana instance with ECK.
This section goes into more details about how to configure Kibana with ECK.

* <<{p}-eck-managed-es,Use an Elasticsearch cluster managed by ECK>>
* <<{p}-advanced-configuration,Advanced configuration>>
** <<{p}-pod-configuration,Pod Configuration>>
** <<{p}-kibana-configuration,Kibana Configuration>>
** <<{p}-kibana-scaling,Scaling out a Kibana deployment>>
* <<{p}-ssecure-settings,Secure settings>>
* <<{p}-http-configuration,HTTP Configuration>>
** <<{p}-http-publish,HTTP settings and TLS SANs>>
** <<{p}-http-custom-tls,Provide your own certificate>>
** <<{p}-http-disable-tls,Disable TLS>>

[float]
[id="{p}-kibana-eck-managed-es"]
=== Use an Elasticsearch cluster managed by ECK

Connecting Kibana to an Elasticsearch instance managed by ECK is pretty straightforward.
Here is an example of a minimal Kibana deployment descriptor:
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/{eck_crd_version}
kind: Kibana
metadata:
  name: quickstart
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: quickstart
    namespace: default <1>
----

<1> `namespace` is an optional parameter that you can use to connect to an Elasticsearch in an other namespace.

The Kibana configuration file is automatically setup by ECK to establish a secured connection to Elasticsearch.

[float]
[id="{p}-advanced-configuration"]
=== Advanced configuration

If you already have read the documentation about how to run Elasticsearch on ECK then most of the concepts and the ideas
described here will sound familiar to you.
This is because the resource definitions in ECK share the same philosophy when it comes to:

* Customize the Pod configuration
* Customize the product configuration
* Manage the HTTP settings
* Use some secure settings

[float]
[id="{p}-pod-configuration"]
==== Pod Configuration
The Kibana resource definition lets you define your own Pod template, add your own settings and merge them
with our defaults.
You can find more information about Pod template link:k8s-pod-template.html[in a dedicated section].

As an example here is a Kibana deployment with a custom node affinity and some custom resources
applied on the Kibana container:
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  podTemplate:
    spec:
      containers:
      - name: kibana <1>
        resources:
          requests:
            memory: 1Gi
            cpu: 0.5
          limits:
            memory: 2Gi
            cpu: 2
      nodeSelector:
        type: frontend
----

<1> Note that the name of the Kibana container in the Pod created by ECK is `kibana`.

For more information about the resources and the default settings please refer to
link:k8s-managing-compute-resources.html#k8s-compute-resources-kibana-and-apm[Set compute resources for Kibana and the APM Server].

[float]
[id="{p}-kibana-configuration"]
==== Kibana Configuration
You can add your own Kibana settings in the `spec.config` section.

As an example here is how to set `elasticsearch.requestHeadersWhitelist` in the Kibana configuration file.

[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  config:
     elasticsearch.requestHeadersWhitelist:
     - authorization
----

NOTE: The configuration items you provide always take precedence over the ones that are generated by the operator.

[float]
[id="{p}-kibana-scaling"]
=== Scaling out a Kibana deployment

You may want to deploy more than one instance of Kibana. In this case all the instances have to share
the same encryption key.

This can be done either directly in the `spec.config` section:

[source,yaml]
----
spec:
  config:
     xpack.security.encryptionKey: my-secret-key
----

Or by using a secure setting (recommended) as described in the next section.

[float]
[id="{p}-secure-settings"]
=== Secure Settings

You can use Kubernetes secrets to hold your secure settings in the link:k8s-es-secure-settings.html[same way it is done with Elasticsearch].

As an example if you want to scale out your Kibana deployment by creating several instances then you have to
set `xpack.security.encryptionKey` in the Kibana configuration.

. First create a secret with the secret setting:
+
[source,yaml,subs="attributes"]
----
kubectl create secret generic kibana-secret-settings \
 --from-literal=xpack.security.encryptionKey=94d2263b1ead716ae228277049f19975aff864fb4fcfe419c95123c1e90938cd
----
+
. Then add a reference to this secret in the `secureSettings` section:
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 3
  elasticsearchRef:
    name: "elasticsearch-sample"
  secureSettings:
  - secretName: kibana-secret-settings
----

[float]
[id="{p}-http-configuration"]
=== HTTP Configuration

[float]
[id="{p}-http-publish"]
==== Publish the service and customize the self signed certificate

You may want to expose Kibana onto an external IP address. In this case you may also want to include a custom
DNS name or IP in the self-generated certificate.
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    service:
      spec:
        type: LoadBalancer # default is ClusterIP
    tls:
      selfSignedCertificate:
        subjectAltNames:
        - ip: 1.2.3.4
        - dns: kibana.example.com
----
+
You can also use these two features separately, either expose the service or add some subjects to the
self-signed certificate.

[float]
[id="{p}-http-custom-tls"]
==== Provide your own certificate

In order to use your own certificate the behavior and the relevant configuration is identical to what is done for Elasticsearch.
See link:k8s-accessing-elastic-services.html#k8s-setting-up-your-own-certificate[Setting up your own certificate] for more information on how to use your own certificate to configure the TLS endpoint of Kibana.

[float]
[id="{p}-http-disable-tls"]
==== Disable TLS

You can disable the generation of the self-signed certificate and hence disable TLS.
+
[source,yaml,subs="attributes"]
----
apiVersion: kibana.k8s.elastic.co/v1beta1
kind: Kibana
metadata:
  name: kibana-sample
spec:
  version: {version}
  count: 1
  elasticsearchRef:
    name: "elasticsearch-sample"
  http:
    tls:
      selfSignedCertificate:
        disabled: true
----
